// en futura clase core/mongoose con params arrService_ModParams, que cargue el cliente en este singleton object with dependencies.
let initMongoose = async () : Promise<mongoose.Mongoose> => {

    let objMongoose : mongoose.Mongoose = await mongoose.connect(objConfig.arrConfig_Mongodb.strConnection, {
        useNewUrlParser: true,
        useUnifiedTopology: true
    });

    objMongoose.set('useCreateIndex', true);

    objMongoose.connection.on('connected', function() {
        console.log("[Service] - Connected to MongoDB server.\n");
    });
    objMongoose.connection.on('error', function( err: any ) {
        console.log("[Service] - Error on MongoDB connection.");
        console.log( err );
        process.exit(0);
    } );

    objMongoose.connection.on('disconnected', function() {
        console.log("[Service] - Disconnected from MongoDB server.\n");
        process.exit(0);
    } );


    // initSchema() => carga de todos los modelos e interfaces "fuera de las clases".

    return objMongoose;
};
